" References:
" - sensible.vim
" - https://www.freecodecamp.org/news/vimrc-configuration-guide-customize-your-vim-editor/
" - https://github.com/YanivZalach/Vim_Config_NO_PLUGINS/blob/main/.vimrc
" - https://github.com/blaenk/dots/blob/master/vim/.vimrc
" - https://stackoverflow.com/questions/48271865/vim-whats-the-best-way-to-set-statusline-color-to-change-based-on-mode
" - https://github.com/noahfrederick/vim-noctu/blob/master/colors/noctu.vim


" GENERAL ------------------------------------------------------------------ {{{{

" Disable vi compatibility, if for some reason it's on.
if &compatible
  set nocompatible
endif

" Default interface language
let $LANG='en'
set langmenu=en

" Default file encoding
set fenc=utf-8
set encoding=utf-8
set termencoding=utf-8

" Sync w/ system clipboard
set clipboard=unnamed

if $TERM ==# "foot"
  " Enable native mouse support
  set mouse=a
  set ttymouse=sgr

  " Workaround bug in vim, where it incorrectly thinks modifyOtherKeys level 2 is
  " enabled, even when it's not. The snippets below ensure modifyOtherKeys=2 is
  " enabled. https://github.com/vim/vim/issues/9014
  let &t_TI = "\<Esc>[>4;2m"
  let &t_TE = "\<Esc>[>4;m"
else
  " Enable mouse
  set mouse=nv
endif

" }}}}


" FILES ------------------------------------------------------------------- {{{{

" Enable type file detection.
" Vim will be able to try to detect the type of file in use.
filetype on

" Enable plugins and load plugin for the detected file type.
filetype plugin on

" Load an indent file for the detected file type.
filetype indent on

" Do not save backup files.
set nobackup
set nowritebackup
set noswapfile

" Reload files changed outside vim
set autoread

" Automatically :write before running commands
set autowrite

"Return to last edit position when opening files
autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \ exe "normal! g`\"" | endif

"Keep undo history across sessions, by storing in file.
if has('persistent_undo') && isdirectory(expand('~').'/.vim/backups')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" }}}}


" EDITOR ------------------------------------------------------------------ {{{{

" Allow backspace in insert mode
set backspace=indent,eol,start

"Time out on key codes but not mappings.
"Basically this makes terminal Vim work sanely
set notimeout
set ttimeout
set ttimeoutlen=10
set timeoutlen=500              "By default timeoutlen is 1000 ms

" Max num of open tabs
set tabpagemax=50

" Persist g:UPPERCASE variables, used by some plugins, in .viminfo.
if !empty(&viminfo)
  set viminfo^=!
endif

" Saving options in session and view files causes more problems than it
" solves, so disable it.
set sessionoptions-=options
set viewoptions-=options

"	List all matches without completing, then each full match >vim
set wildmode=list,full

" Enhanced command-line completion mode w\ popup menu
set wildmenu
set wildoptions+=pum
set pumheight=8

" Wild menu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" Delete comment character when joining commented lines.
set formatoptions+=tcqj

set ttyfast

" For regular expressions backwards comp
set magic

" Set regular expression engine automatically
set regexpengine=0

" Use Bash shell
set shell=/usr/bin/env\ bash

" Keep tabs in the bg
set hidden

"dont show epic message for swapfiles
"Use :recover when we actually need to recover from swapfile
set shortmess+=A

" Disable a legacy behavior that can break plugin maps.
if has('langmap') && exists('+langremap') && &langremap
  set nolangremap
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" Enable the :Man command shipped inside Vim's man filetype plugin.
if exists(':Man') != 2 && !exists('g:loaded_man') && &filetype !=? 'man' && !has('nvim')
  runtime ftplugin/man.vim
endif

"Open help vertically
command! -nargs=* -complete=help Help vertical belowright help <args>
autocmd FileType help wincmd L

"Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" }}}}


" INDENTATION ------------------------------------------------------------- {{{{

" Disable autoindentation
set noautoindent

" Indentation
set smartindent

" Set shift width to 2 spaces.
set shiftwidth=2

" Set tab width to 2 columns.
set tabstop=2

" Spaces a tab counts while editing
set softtabstop=2

set formatoptions=qrn1

" Use space characters instead of tabs.
set expandtab

" Inserts blanks according to shiftwidth
set smarttab

" Do not let cursor scroll below or above N number of lines when scrolling.
set scrolloff=1

" Do not wrap lines. Allow long lines to extend as far as the line goes.
set nowrap

" ALT - Wrap lines at 80chars
" set wrap
" set textwidth=80

" Wrap lines at convenient points
set linebreak

"Display tabs and trailing spaces visually
set listchars=tab:\|\ ,trail:-,extends:>,precedes:<,nbsp:+

" function! ToggleIndentGuides()
" if exists('b:indent_guides')
"   call matchdelete(b:indent_guides)
"   unlet b:indent_guides
" else
"   let pos = range(1, &l:textwidth, &l:shiftwidth)
"   call map(pos, '"\\%" . v:val . "v"')
"   let pat = '\%(\_^\s*\)\@<=\%(' . join(pos, '\|') . '\)\s'
"   let b:indent_guides = matchadd('CursorLine', pat)
" endif
" endfunction

" }}}}


" UI ---------------------------------------------------------------------- {{{{

" Show partial command you type in the last line of the screen.
set showcmd

" Show the mode you are on the last line.
set noshowmode

" Current line number
set number

" Line numbers
set relativenumber

" Show the cursor position all the time
set ruler

" Disable column highlight
set nocursorcolumn

" Disable line highlight
set nocursorline

" Cursor modes
" Normal - Insert
let &t_SI= "\e[5 q"
let &t_EI= "\e[2 q"

" https://stackoverflow.com/questions/6488683/how-to-change-the-cursor-between-normal-and-insert-modes-in-vim
" reset the cursor on start (for older versions of vim, usually not required)
augroup myCmds
  au!
  autocmd VimEnter * silent !echo -ne "\e[2 q"
augroup END

" Disable bells
set noerrorbells

" Disable modelines as a security precaution
set modelines=0
set nomodeline

" Prefer splitting windows to the right
set splitright
set splitbelow

" Do not hide markdown
set conceallevel=0

" Command line height
set cmdheight=1

set scrolloff=1
set sidescroll=1
set sidescrolloff=2
set display+=lastline
set display+=truncate

" have a fixed column for the diagnostics to appear in
" this removes the jitter when warnings/errors flow in
set signcolumn=yes
set invlist

" Allow color schemes to do bright colors without forcing bold.
if !empty(&t_Co)
  set t_Co=16
endif

colorscheme default
set background=dark

" }}}}


" SEARCH ------------------------------------------------------------------- {{{{

" While searching though a file incrementally highlight
" matching characters as you type.
set incsearch

" Ignore capital letters during search.
set ignorecase

" Override the ignorecase option if searching for capital letters.
" This will allow you to search specifically for capital letters.
set smartcase

" Show matching words during a search.
set showmatch

" Use highlighting when doing a search.
set hlsearch

" Set the commands to save in history default number is 20.
set history=1000

" }}}}


" COMPLETION --------------------------------------------------------------- {{{{

" Disable completing keywords in included files (e.g., #include in C).
" When configured properly, this can result in the slow, recursive scanning of
" hundreds of files of dubious relevance.
set complete-=i

" Enable Spelling Suggestions for Auto-Completion
set complete+=k
set completefunc=menu,menuone,noinsert
set nrformats-=octal
set virtualedit=block

" Enable Omni complete features
set omnifunc=syntaxcomplete#Complete
set completefunc=syntaxcomplete#Complete

" Replace the check for a tags file in the parent directory of the current
" file with a check in every ancestor directory.
if has('path_extra') && (',' . &g:tags . ',') =~# ',\./tags,'
  setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

" Minimalist-Tab Complete
inoremap <expr> <Tab> TabComplete()
fun! TabComplete()
    if getline('.')[col('.') - 2] =~ '\K' || pumvisible()
        return "\<C-N>"
    else
        return "\<Tab>"
    endif
endfun

" }}}}


" MAPPINGS ----------------------------------------------------------------- {{{{

let g:mapleader = " "

" Easy mode
map <down> <nop>
map <left> <nop>
map <right> <nop>
map <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>
imap <up> <nop>

" quit
map <leader>qq :qa<cr>

" Disable highlight
nnoremap <silent> <leader>h :noh<cr><ESC>

" Source current file
map <silent> <leader>cs :source %<CR>

" ESC in insert mode
verbose inoremap jk <ESC>
verbose inoremap kj <ESC>

" Resize windows with arrow keys
nnoremap <C-Down> <C-w>+
nnoremap <C-Up> <C-w>-
nnoremap <C-Left> <C-w><
nnoremap <C-Right>  <C-w>>

" Smart way to move between windows
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l

" Close the current buffer
map <leader>bd :bdelete<cr>
"map <leader>bd :bdelete<cr>:tabclose<cr>gT

" Buffer prev/next
map <leader>j :bprev<cr>
map <leader>k :bnext<cr>
nnoremap <C-,> :bnext<CR>
nnoremap <C-.> :bprev<CR>

" Use Alt- numbers to pick the tab you want
map <silent> <a-1> :tabn 1<CR>
map <silent> <a-2> :tabn 2<CR>
map <silent> <a-3> :tabn 3<CR>
map <silent> <a-4> :tabn 4<CR>
map <silent> <a-5> :tabn 5<CR>
map <silent> <a-6> :tabn 6<CR>
map <silent> <a-7> :tabn 7<CR>
map <silent> <a-8> :tabn 8<CR>
map <silent> <a-9> :tabn 9<CR>

" From `:help :DiffOrig`.
if exists(":DiffOrig") != 2
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
        \ | diffthis | wincmd p | diffthis
endif

" Netrw opts
let g:netrw_banner=0
let g:netrw_liststyle = 3  " default directory view. Cycle with i
let g:netrw_browse_split=4
let g:netrw_altv = 0
let g:netrw_keepdir=0
let g:netrw_winsize=30

" Open Netrw window
map <leader>e :Vexplore<CR>

" Open a terminal window
map <c-/> :ter<CR>

" Closing the terminal window
tnoremap <c-/> exit<CR>

" Esc to make the terminal scrollable and I to input mode
tnoremap <Esc> <C-\><C-n>

" make wrapped lines more intuitive
noremap <silent> k gk
noremap <silent> j gj
noremap <silent> 0 g0
noremap <silent> $ g$

" make Y consistent with C and D
nnoremap Y y$

" }}}}


" HIGHLIGHTS -------------------------------------------------------------- {{{{

" Turn syntax highlighting on.
syntax on

syntax sync minlines=256
set synmaxcol=300
set re=1

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

if exists("syntax_on")
  syntax reset
endif

" Correctly highlight $() and other modern affordances in filetype=sh.
if !exists('g:is_posix') && !exists('g:is_bash') && !exists('g:is_kornshell') && !exists('g:is_dash')
  let g:is_posix = 1
endif

highlight! clear

hi Normal              ctermfg=7
hi Cursor              ctermfg=NONE  ctermbg=NONE   cterm=inverse
hi iCursor             ctermfg=NONE  ctermbg=NONE   cterm=inverse
hi CursorLine          ctermfg=NONE  ctermbg=NONE   cterm=NONE
hi MatchParen          ctermfg=7     ctermbg=8      cterm=underline
hi Pmenu               ctermfg=8     ctermbg=NONE
hi PmenuThumb          ctermfg=8     ctermbg=NONE
hi PmenuSBar           ctermfg=7     ctermbg=NONE
hi PmenuSel            ctermfg=4     ctermbg=NONE
hi ColorColumn                       ctermbg=0
hi SpellBad            ctermfg=1     ctermbg=NONE  cterm=underline
hi SpellCap            ctermfg=10    ctermbg=NONE  cterm=underline
hi SpellRare           ctermfg=11    ctermbg=NONE  cterm=underline
hi SpellLocal          ctermfg=13    ctermbg=NONE  cterm=underline
hi NonText             ctermfg=8
hi LineNr              ctermfg=8     ctermbg=NONE
hi CursorLineNr        ctermfg=8     ctermbg=NONE  cterm=NONE
hi Visual              ctermfg=NONE  ctermbg=0     cterm=NONE
hi IncSearch           ctermfg=0     ctermbg=13    cterm=NONE
hi Search              ctermfg=0     ctermbg=11
hi VertSplit           ctermfg=0     ctermbg=0     cterm=NONE
hi TabLine             ctermfg=0     ctermbg=0     cterm=NONE
hi TabLineFill         ctermfg=0     ctermbg=0     cterm=NONE
hi TabLineSel          ctermfg=7     ctermbg=0
hi Folded              ctermfg=6     ctermbg=0     cterm=bold
hi Conceal             ctermfg=8     ctermbg=NONE
hi Directory           ctermfg=4                   cterm=bold
hi Title               ctermfg=3                   cterm=bold
hi ErrorMsg            ctermfg=9     ctermbg=NONE
hi DiffAdd             ctermfg=0     ctermbg=10    cterm=bold
hi DiffChange          ctermfg=0     ctermbg=11    cterm=bold
hi DiffDelete          ctermfg=0     ctermbg=9     cterm=bold
hi DiffText            ctermfg=0     ctermbg=13    cterm=bold
hi User1               ctermfg=7     ctermbg=0     cterm=NONE
hi User2               ctermfg=7     ctermbg=8     cterm=NONE
hi User3               ctermfg=10    ctermbg=8     cterm=NONE
hi User4               ctermfg=0     ctermbg=2     cterm=bold
hi User5               ctermfg=3     ctermbg=0     cterm=bold
hi! link User6  LineNr

hi! link CursorColumn  CursorLine
hi! link SignColumn    LineNr
hi! link WildMenu      Visual
hi! link FoldColumn    SignColumn
hi! link WarningMsg    ErrorMsg
hi! link MoreMsg       Title
hi! link Question      MoreMsg
hi! link ModeMsg       MoreMsg
hi! link TabLineFill   VertSplit
hi! link SpecialKey    NonText
hi! link WildMenu      Folded

" Generic syntax
hi Comment         ctermfg=8  ctermbg=NONE  cterm=italic
hi Constant        ctermfg=14 ctermbg=NONE  cterm=NONE
hi String          ctermfg=2  ctermbg=NONE  cterm=NONE
hi! link Character String
hi Number          ctermfg=3  ctermbg=NONE  cterm=NONE
hi! link Boolean Number
hi! link Float Number
hi Identifier      ctermfg=7  ctermbg=NONE  cterm=NONE
hi Function        ctermfg=4  ctermbg=NONE  cterm=NONE
hi Statement       ctermfg=5  ctermbg=NONE  cterm=NONE
hi! link Operator Identifier
hi Keyword         ctermfg=9
hi PreProc         ctermfg=9  ctermbg=NONE  cterm=NONE
hi include         ctermfg=5  ctermbg=NONE  cterm=NONE
hi! link Define Include
hi! link Macro Include
hi! link PreCondit Include
hi Type            ctermfg=3  ctermbg=NONE  cterm=NONE
hi Special         ctermfg=9  ctermbg=NONE  cterm=NONE
hi SpecialChar     ctermfg=6  ctermbg=NONE  cterm=NONE
hi! link Tag Special
hi! link Delimiter Identifier
hi SpecialComment  ctermfg=8  ctermbg=0     cterm=italic
hi Debug           ctermfg=11 ctermbg=NONE  cterm=bold,italic
hi Underlined      ctermfg=4  ctermbg=NONE  cterm=underline
hi Ignore          ctermfg=7  ctermbg=NONE  cterm=NONE
hi! link Error     ErrorMsg
hi Todo            ctermfg=6  ctermbg=NONE  cterm=bold,italic

" HTML {{{
hi htmlTagName              ctermfg=2
hi htmlTag                  ctermfg=2
hi htmlArg                  ctermfg=10
hi htmlH1                   cterm=bold
hi htmlBold                 cterm=bold
hi htmlItalic               cterm=underline
hi htmlUnderline            cterm=underline
hi htmlBoldItalic           cterm=bold,underline
hi htmlBoldUnderline        cterm=bold,underline
hi htmlUnderlineItalic      cterm=underline
hi htmlBoldUnderlineItalic  cterm=bold,underline
hi! link htmlLink           Underlined
hi! link htmlEndTag         htmlTag

"}}}
" XML {{{
hi xmlTagName       ctermfg=4
hi xmlTag           ctermfg=12
hi! link xmlString  xmlTagName
hi! link xmlAttrib  xmlTag
hi! link xmlEndTag  xmlTag
hi! link xmlEqual   xmlTag

"}}}
" JavaScript {{{
hi! link javaScript        Normal
hi! link javaScriptBraces  Delimiter

"}}}
" PHP {{{
hi phpSpecialFunction    ctermfg=5
hi phpIdentifier         ctermfg=11
hi phpParent             ctermfg=8
hi! link phpVarSelector  phpIdentifier
hi! link phpHereDoc      String
hi! link phpDefine       Statement

"}}}
" Markdown {{{
hi! link markdownHeadingRule        NonText
hi! link markdownHeadingDelimiter   markdownHeadingRule
hi! link markdownLinkDelimiter      Delimiter
hi! link markdownURLDelimiter       Delimiter
hi! link markdownCodeDelimiter      NonText
hi! link markdownLinkTextDelimiter  markdownLinkDelimiter
hi! link markdownUrl                markdownLinkText
hi! link markdownAutomaticLink      markdownLinkText
hi! link markdownCodeBlock          String
hi markdownCode                     cterm=bold
hi markdownBold                     cterm=bold
hi markdownItalic                   cterm=underline

"}}}
" Ruby {{{
hi! link rubyDefine                 Statement
hi! link rubyLocalVariableOrMethod  Identifier
hi! link rubyConstant               Constant
hi! link rubyInstanceVariable       Number
hi! link rubyStringDelimiter        rubyString

"}}}
" Git {{{
hi gitCommitBranch               ctermfg=3
hi gitCommitSelectedType         ctermfg=10
hi gitCommitSelectedFile         ctermfg=2
hi gitCommitUnmergedType         ctermfg=9
hi gitCommitUnmergedFile         ctermfg=1
hi! link gitCommitFile           Directory
hi! link gitCommitUntrackedFile  gitCommitUnmergedFile
hi! link gitCommitDiscardedType  gitCommitUnmergedType
hi! link gitCommitDiscardedFile  gitCommitUnmergedFile

"}}}
" Vim {{{
hi! link vimSetSep    Delimiter
hi! link vimContinue  Delimiter
hi! link vimHiAttrib  Constant

"}}}
" LESS {{{
hi lessVariable             ctermfg=11
hi! link lessVariableValue  Normal

"}}}
" NERDTree {{{
hi! link NERDTreeHelp      Comment
hi! link NERDTreeExecFile  String

"}}}
" Vimwiki {{{
hi! link VimwikiHeaderChar  markdownHeadingDelimiter
hi! link VimwikiList        markdownListMarker
hi! link VimwikiCode        markdownCode
hi! link VimwikiCodeChar    markdownCodeDelimiter

"}}}
" Help {{{
hi! link helpExample         String
hi! link helpHeadline        Title
hi! link helpSectionDelim    Comment
hi! link helpHyperTextEntry  Statement
hi! link helpHyperTextJump   Underlined
hi! link helpURL             Underlined

"}}}
" CtrlP {{{
hi! link CtrlPMatch    String
hi! link CtrlPLinePre  Comment

"}}}
" Mustache {{{
hi mustacheSection           ctermfg=14  cterm=bold
hi mustacheMarker            ctermfg=6
hi mustacheVariable          ctermfg=14
hi mustacheVariableUnescape  ctermfg=9
hi mustachePartial           ctermfg=13

"}}}
" Shell {{{
hi shDerefSimple     ctermfg=11
hi! link shDerefVar  shDerefSimple

"}}}
" Syntastic {{{
hi SyntasticWarningSign       ctermfg=3  ctermbg=NONE
hi SyntasticErrorSign         ctermfg=1  ctermbg=NONE
hi SyntasticStyleWarningSign  ctermfg=2  ctermbg=NONE
hi SyntasticStyleErrorSign    ctermfg=4  ctermbg=NONE

"}}}
" Netrw {{{
hi netrwExe       ctermfg=9
hi netrwClassify  ctermfg=8  cterm=bold

"}}}
" Ledger {{{
hi ledgerAccount  ctermfg=11
hi! link ledgerMetadata  Comment
hi! link ledgerTransactionStatus  Statement

"}}}
" Diff {{{
hi diffAdded  ctermfg=2
hi diffRemoved  ctermfg=1
hi! link diffFile  PreProc
hi! link diffLine  Title

"}}}
" Plug {{{
hi plugSha  ctermfg=3

"}}}
" Blade {{{
hi! link bladeStructure  PreProc
hi! link bladeParen      phpParent
hi! link bladeEchoDelim  PreProc

"}}}

" }}}}


" STATUSLINE -------------------------------------------------------------- {{{{

hi StatusLine           ctermfg=0   ctermbg=0   cterm=NONE
hi StatusLineNC         ctermfg=0   ctermbg=0   cterm=italic
hi StatusLineNormal     ctermfg=0   ctermbg=2   cterm=bold
hi StatusLineInsert     ctermfg=0   ctermbg=12  cterm=bold
hi StatusLineReplace    ctermfg=0   ctermbg=11  cterm=bold
hi StatusLineVisual     ctermfg=0   ctermbg=5   cterm=bold
hi StatusLineVisualL    ctermfg=0   ctermbg=5   cterm=bold
hi StatusLineVisualB    ctermfg=0   ctermbg=5   cterm=bold
hi StatusLineCommand    ctermfg=0   ctermbg=2   cterm=bold
hi StatusLineSelect     ctermfg=0   ctermbg=4   cterm=bold
hi StatusLineSelectL    ctermfg=0   ctermbg=4   cterm=bold
hi StatusLineSelectB    ctermfg=0   ctermbg=4   cterm=bold

" always display statusline
set laststatus=2

" reset statusline
set statusline=

" add buffer num
set statusline+=%1*\ %n\ 

" add vim mode
set statusline+=%{%GetCurrentModeColor()%}
set statusline+=\ %{g:currentmode[mode()]}\ 

" add git branch
set statusline+=%3*\%{StatuslineGit()}

" add server hostname
set statusline+=%5*\%{exists('$SSH_TTY')?'\ \ \@'.hostname().'':''}

" add filename
set statusline+=%1*\ %{fnamemodify(getcwd(),':~')}\/%<%f

" add file modified/readonly/top-bottom flag
set statusline+=\ %m%r%w\ 

" add separation
set statusline+=%1*\ %=

" add file encoding + format + filetype
set statusline+=%2*\ \ %{&fileencoding?&filencoding:&encoding}
set statusline+=%2*\ \ %(%{&fileformat}%)
set statusline+=%3*\ \ %(%{&filetype}%)\ \ 

" add row:col
set statusline+=%4*\ \ %l:%c\ \ 

" mode detector
let g:currentmode={
       \ 'n'      : 'NORMAL',
       \ 'i'      : 'INSERT',
       \ 'R'      : 'REPLACE',
       \ 'Rv'     : 'V-REPLACE',
       \ 'v'      : 'VISUAL',
       \ 'V'      : 'V-LINE',
       \ "\<C-V>" : 'V-BLOCK',
       \ 'c'      : 'COMMAND',
       \ 's'      : 'SELECT',
       \ 'S'      : 'S-LINE',
       \ "\<C-S>" : 'S-BLOCK',
       \ 't'      : 'TERMINAL',
       \}

" mode color group assign
let s:statusline_modes_dict = {
    \ 'n' : {
      \ 'text'        : 'NORMAL',
      \ 'color_group' : 'StatusLineNormal'
    \ },
    \ 'i' : {
      \ 'text'        : 'INSERT',
      \ 'color_group' : 'StatusLineInsert'
    \ },
    \ 'R' : {
      \ 'text'        : 'REPLACE',
      \ 'color_group' : 'StatusLineReplace'
    \ },
    \ 'v' : {
      \ 'text'        : 'VISUAL',
      \ 'color_group' : 'StatusLineVisual'
    \ },
    \ 'V' : {
      \ 'text'        : 'V-LINE',
      \ 'color_group' : 'StatusLineVisualL'
    \ },
    \ "\<C-v>" : {
      \ 'text'        : 'V-BLOCK',
      \ 'color_group' : 'StatusLineVisualB'
    \ },
    \ 'c' : {
      \ 'text'        : 'COMMAND',
      \ 'color_group' : 'StatusLineCommand'
    \ },
    \ 's' : {
      \ 'text'        : 'SELECT',
      \ 'color_group' : 'StatusLineSelect'
    \ },
    \ 'S' : {
      \ 'text'        : 'S-LINE',
      \ 'color_group' : 'StatusLineSelectL'
    \ },
    \ "\<C-s>" : {
      \ 'text'        : 'S-BLOCK',
      \ 'color_group' : 'StatusLineSelectB'
    \ },
    \ 't' : {
      \ 'text'        : 'TERMINAL',
      \ 'color_group' : 'StatusLineTerminal'
    \ },
\ }

" return git branch
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

" show git branch if any
function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.'* ':''
endfunction

" return mode color
function! GetCurrentModeColor()
  let md = mode()
  if (has_key (s:statusline_modes_dict, md))
    return "%#" . s:statusline_modes_dict[md]['color_group'] . "#"
  endif
  return "%#StatusLine#"
endfunction

" autocommands to disable statusline for terminal, netwr and help buffers
augroup statuslines
  autocmd!
  autocmd TerminalOpen * setlocal statusline=%6*\ 
  autocmd FileType netrw setlocal statusline=%6*\ 
  autocmd FileType help setlocal statusline=%6*\ 
augroup end

" }}}}

" vim: fdm=marker:sw=2:sts=2:et
